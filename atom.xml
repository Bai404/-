<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bai&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-18T15:13:18.390Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>一只白~</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编程题Check for Palindromes（检查是否为回文）</title>
    <link href="http://yoursite.com/2019/02/18/%E7%BC%96%E7%A8%8B%E9%A2%98Check%20for%20Palindromes%EF%BC%88%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%B8%BA%E5%9B%9E%E6%96%87%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/18/编程题Check for Palindromes（检查是否为回文）/</id>
    <published>2019-02-18T15:12:18.110Z</published>
    <updated>2019-02-18T15:13:18.390Z</updated>
    
    <content type="html"><![CDATA[<p>FreeCodeCamp中文社区刷题答案及笔记</p><hr><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>如果给定的字符串是回文，返回true，反之，返回false。</p><p>如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。</p><p>注意你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。</p><p>函数参数的值可以为”racecar”，”RaceCar”和”race CAR”。</p><h3 id="测试要求"><a href="#测试要求" class="headerlink" title="测试要求"></a>测试要求</h3><p>palindrome(“eye”) 应该返回一个布尔值<br>palindrome(“eye”) 应该返回 true.<br>palindrome(“race car”) 应该返回 true.<br>palindrome(“not a palindrome”) 应该返回 false.<br>palindrome(“A man, a plan, a canal. Panama”) 应该返回 true.<br>palindrome(“never odd or even”) 应该返回 true.<br>palindrome(“nope”) 应该返回 false.<br>palindrome(“almostomla”) 应该返回 false.<br>palindrome(“My age is 0, 0 si ega ym.”) 应该返回 true.<br>palindrome(“1 eye for of 1 eye.”) 应该返回 false.<br>palindrome(“0_0 (: /-\ :) 0-0”) 应该返回 true.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lowStr=str.replace(<span class="regexp">/[\W_]/g</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line">  <span class="keyword">var</span> arr=lowStr.split(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">var</span> newStr=arr.reverse().join(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">if</span>(newStr==lowStr)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newStr=str.replace(<span class="regexp">/[\W_]/g</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;newStr.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(newStr.charAt(i) != newStr.charAt(newStr.length<span class="number">-1</span>-i))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>str.replace(/[\W_]/g,””).toLowerCase();去除给定字符串中多余的字符，并转为小写。转化为数组以后使用数组的reverse方法进行反转。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FreeCodeCamp中文社区刷题答案及笔记&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;如果给定的字符串是回文，返回true，反之，返回false。&lt;/p&gt;
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>如何判断一个变量是数组Array类型</title>
    <link href="http://yoursite.com/2019/02/16/isArray/"/>
    <id>http://yoursite.com/2019/02/16/isArray/</id>
    <published>2019-02-16T14:26:50.264Z</published>
    <updated>2019-02-16T14:28:47.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-instanceof操作符"><a href="#1-instanceof操作符" class="headerlink" title="1. instanceof操作符"></a>1. instanceof操作符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="2-对象的constructor属性"><a href="#2-对象的constructor属性" class="headerlink" title="2. 对象的constructor属性"></a>2. 对象的constructor属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="3-Array-isArray-（ie9以上支持）"><a href="#3-Array-isArray-（ie9以上支持）" class="headerlink" title="3. Array.isArray()（ie9以上支持）"></a>3. Array.isArray()（ie9以上支持）</h3><pre><code>Array.isArray([1, 2, 3]);  // true</code></pre><h3 id="4-Object-prototype-toString"><a href="#4-Object-prototype-toString" class="headerlink" title="4. Object.prototype.toString"></a>4. Object.prototype.toString</h3><p>这个方法稍微绕了点弯，我们先看以下一下例子就明白了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.()) <span class="comment">//[object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(str))<span class="comment">//[object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(num))<span class="comment">//[object Number]</span></span><br></pre></td></tr></table></figure></p><p>call改变toString的this引用为待检测的对象，返回此对象的字符串表示，然后对比此字符串是否是’[object Array]’，以判断其是否是Array的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr= [1,1]</span><br><span class="line">console.log(Object.prototype.toString.call(arr))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-instanceof操作符&quot;&gt;&lt;a href=&quot;#1-instanceof操作符&quot; class=&quot;headerlink&quot; title=&quot;1. instanceof操作符&quot;&gt;&lt;/a&gt;1. instanceof操作符&lt;/h3&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期笔记</title>
    <link href="http://yoursite.com/2019/02/02/VUElifcircle/"/>
    <id>http://yoursite.com/2019/02/02/VUElifcircle/</id>
    <published>2019-02-02T15:32:23.413Z</published>
    <updated>2019-02-02T15:35:56.792Z</updated>
    
    <content type="html"><![CDATA[<p>正在学习Vue生命周期，进行一下笔记整理，方便以后温习！</p><hr><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。<br><img src="https://img-blog.csdnimg.cn/20190201104155351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>vue 实例的生命周期钩子函数，可以把它理解为：vue实例在某一个时间点会自动执行的函数。</p><p>Vue 实例的生命周期函数（官方11个）：</p><ul><li>beforeCreate：在实例部分（事件/生命周期）初始化完成之后调用。<ul><li>created：在完成外部的注入/双向的绑定等的初始化之后调用。</li><li>beforeMount：在页面渲染之前执行。</li><li>mounted：dom 元素在挂载到页面之后执行。</li></ul></li></ul><p>首次加载页面时，不会走下面这两个钩子，只有当数据发生改变时才会执行</p><ul><li>beforeUpdate：数据改变，还没重新渲染之前执行。<ul><li>updated：渲染数据完成之后执行。</li></ul></li></ul><p>执行销毁需要调用：vm.$destroy()</p><ul><li>beforeDestroy：实例销毁之前执行。</li><li>destroyed：实例销毁之后执行。</li></ul><h3 id="beforeCreate，-created"><a href="#beforeCreate，-created" class="headerlink" title="beforeCreate， created:"></a>beforeCreate， created:</h3><p> 首先这是测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div id=&quot;app&quot;&gt;hello world&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        beforeCreate: function () &#123;</span><br><span class="line">            console.log(&apos;beforeCreate&apos;);</span><br><span class="line">            console.log(this.$el,this.$data);</span><br><span class="line">        &#125;,</span><br><span class="line">        created: function () &#123;</span><br><span class="line">            console.log(&quot;created&quot;);</span><br><span class="line">            console.log(this.$el,this.$data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>控制台输出的结果为<br><img src="https://img-blog.csdnimg.cn/20190201110117584.png" alt="在这里插入图片描述"><br>==beforeCreate==函数在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。==Created==函数在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><p><img src="https://img-blog.csdnimg.cn/20190201122317958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>首先会判断对象是否有el选项。如果有的话就继续向下编译，如果没有el选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用vm.$mount(el)。<br>接着，我们往下看，如果vue实例对象中有template参数选项，则将其作为模板编译成render函数。如果没有template选项，则将外部HTML作为模板编译。<strong>可以看到template中的模板优先级要高于outer HTML的优先级。</strong><br>在代码中添加template：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el: &quot;#app&quot;,</span><br><span class="line">    template: &apos;&lt;div&gt;this is template&lt;/div&gt;&apos;,</span><br><span class="line">    beforeCreate: function () &#123;</span><br><span class="line">        console.log(&apos;beforeCreate&apos;);</span><br><span class="line">        console.log(this.$el,this.$data);</span><br><span class="line">    &#125;,</span><br><span class="line">    created: function () &#123;</span><br><span class="line">        console.log(&quot;created&quot;);</span><br><span class="line">        console.log(this.$el,this.$data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在浏览器打开，<img src="https://img-blog.csdnimg.cn/20190201123339856.png" alt="在这里插入图片描述"><br><strong>可以看到template中的模板优先级要高于outer HTML的优先级。</strong></p><h3 id="beforeMouted，-mounted"><a href="#beforeMouted，-mounted" class="headerlink" title="beforeMouted， mounted:"></a>beforeMouted， mounted:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">'hello world'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">'&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeCreate'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el,<span class="keyword">this</span>.$data);</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"created"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el,<span class="keyword">this</span>.$data);</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beforeMounted"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el,<span class="keyword">this</span>.$data);</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"mounted"</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el,<span class="keyword">this</span>.$data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190201125010584.png" alt="在这里插入图片描述"><br>==beforeMount：== 在挂载开始之前被调用：相关的 render 函数首次被调用。==Mounted：==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">el 被新创建的 vm.$el 替换，</span><br><span class="line">并挂载到实例上去之后调用该钩子。</span><br><span class="line">如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190201125452261.png" alt="在这里插入图片描述"><br>此时是给vue实例对象添加$el成员，并且替换掉挂在的DOM元素。<br><img src="https://img-blog.csdnimg.cn/2019020112541953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190201125429962.png" alt="在这里插入图片描述"><br>结合这三个图可以看出在mounted之前div中还是通过进行占位的，因为此时挂到页面上，还是JavaScript中的虚拟DOM形式存在的。在mounted之后可以看到div中的内容发生了变化。</p><h3 id="beforeUpdate，updated"><a href="#beforeUpdate，updated" class="headerlink" title="beforeUpdate，updated"></a>beforeUpdate，updated</h3><p>当vue发现data中的数据发生了改变，会触发对应组件的重新渲染，先后调用beforeUpdate和updated钩子函数。<br>我们先添加以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"beforeUpdate"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el,<span class="keyword">this</span>.msg,<span class="keyword">this</span>.$data);</span><br><span class="line">&#125;,</span><br><span class="line">updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"updated"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el,<span class="keyword">this</span>.msg,<span class="keyword">this</span>.$data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再开控制台输入</p><blockquote><p>vm.msg=’abc’</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190201130752846.PNG" alt="在这里插入图片描述"><br>==beforeUpdate：== 数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。<br>==updated：== 由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p><h3 id="beforeDestroy和destroyed"><a href="#beforeDestroy和destroyed" class="headerlink" title="beforeDestroy和destroyed"></a>beforeDestroy和destroyed</h3><p>==beforeDestroy：== 实例销毁之前调用。在这一步，实例仍然完全可用。<br>==destroyed：== Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正在学习Vue生命周期，进行一下笔记整理，方便以后温习！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>MVP模式和MVVM模式学习笔记</title>
    <link href="http://yoursite.com/2019/02/02/MVP/"/>
    <id>http://yoursite.com/2019/02/02/MVP/</id>
    <published>2019-02-02T15:32:08.355Z</published>
    <updated>2019-02-02T15:34:29.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVP模式"><a href="#MVP模式" class="headerlink" title="MVP模式"></a>MVP模式</h2><p>模型-视图-表示器，也就是MVP模式。是mvc模式的一种衍生模式，专注于改进表示逻辑。<img src="https://img-blog.csdnimg.cn/2019020108524532.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="M"><a href="#M" class="headerlink" title="M"></a>M</h4><p>Module，模型层，用户数据管理，通常是一些 javaBean, db,sharePreference,network,图片处理等耗时操作均应该放在该层。</p><h4 id="V"><a href="#V" class="headerlink" title="V"></a>V</h4><p>View，视图层,一般指的是四大组件，四大组件对作为View，来完成应用程序界面的展示</p><h4 id="P"><a href="#P" class="headerlink" title="P"></a>P</h4><p>Presenter 控制层，也叫中间层。相当于一个中间桥梁的作用，用于解决View 层与 Module 层的耦合，一般一个 Presenter 可以对应多个 View，一个Presenter 也可以对应多个Module</p><p><strong>MVP原理理解：</strong> 首先视图层V提交一个事件交给控制器P，控制器要么调用ajax去M中获取一些数据，要么根据业务逻辑直接去操作V的DOM。P层是MVP一个重要的位置，它是视图V和模型M的一个中转站。看一些例子可知，使用MVP模式的时候，控制器中大部分代码，其实都在操作dom。</p><ul><li>关键点：<br>View不再负责同步的逻辑，而是由Presenter负责。Presenter中既有业务逻辑也有同步逻辑。<br>View需要提供操作界面的接口给Presenter进行调用。（关键）</li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>模型-视图-视图模型是一种基于MVP的架构模式，它试图更清晰的将用户界面开发从应用程序的业务逻辑与行为中分离。</p><h4 id="M-1"><a href="#M-1" class="headerlink" title="M"></a>M</h4><p>Module，模型层，用户数据管理，通常是一些 javaBean, db,sharePreference,network,图片处理等耗时操作均应该放在该层。</p><h4 id="V-1"><a href="#V-1" class="headerlink" title="V"></a>V</h4><p>View，视图层,一般指的是四大组件，四大组件对作为View，来完成应用程序界面的展示</p><h4 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h4><p>ViewModule 控制层 ViewModule<br>这里需要解释一下什么是ViewModel。ViewModel的含义就是 “Model of View”，视图的模型。它的含义包含了领域模型（Domain Model）和视图的状态（State）。 在图形界面应用程序当中，界面所提供的信息可能不仅仅包含应用程序的领域模型。还可能包含一些领域模型不包含的视图状态，例如电子表格程序上需要显示当前排序的状态是顺序的还是逆序的，而这是Domain Model所不包含的，但也是需要显示的信息。<br>可以简单把ViewModel理解为页面上所显示内容的数据抽象，和Domain Model不一样，ViewModel更适合用来描述View。<br><strong>MVVM理解：</strong> MVVM模式中，我们更多做的V层和M层的操作，V能够监听到你V层上的改变，通过VM层去调用你写的一些逻辑代码，而这些逻辑代码的调用，又帮助你改变了M层的数据。当M层数据改变是，VM层又会自动把改变映射到V层。<br>从MVVM模式中，我们的重点是M层的代码编写~</p><h5 id="MVVM的优缺点"><a href="#MVVM的优缺点" class="headerlink" title="MVVM的优缺点"></a>MVVM的优缺点</h5><ul><li>优点：<br>提高可维护性。解决了MVP大量的手动View和Model同步的问题，提供双向绑定机制。提高了代码的可维护性。<br>简化测试。因为同步逻辑是交由Binder做的，View跟着Model同时变更，所以只需要保证Model的正确性，View就正确。大大减少了对View同步更新的测试。</li><li>缺点：<br>过于简单的图形界面不适用，或说牛刀杀鸡。<br>对于大型的图形应用程序，视图状态较多，ViewModel的构建和维护的成本都会比较高。<br>数据绑定的声明是指令式地写在View的模版当中的，这些内容是没办法去打断点debug的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVP模式&quot;&gt;&lt;a href=&quot;#MVP模式&quot; class=&quot;headerlink&quot; title=&quot;MVP模式&quot;&gt;&lt;/a&gt;MVP模式&lt;/h2&gt;&lt;p&gt;模型-视图-表示器，也就是MVP模式。是mvc模式的一种衍生模式，专注于改进表示逻辑。&lt;img src=&quot;https
      
    
    </summary>
    
      <category term="Computer Basics" scheme="http://yoursite.com/categories/Computer-Basics/"/>
    
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>package control出现错误时怎样让sublime text3支持Vue语法高亮显示</title>
    <link href="http://yoursite.com/2019/01/29/package%20control/"/>
    <id>http://yoursite.com/2019/01/29/package control/</id>
    <published>2019-01-29T15:48:43.544Z</published>
    <updated>2019-01-29T15:51:46.707Z</updated>
    
    <content type="html"><![CDATA[<p>一般sublime按照vue插件步骤是：</p><ul><li>安装Package Control</li><li>Ctrl+Shift+P 执行Install Package</li><li>安装Vue Syntax Highlight<br>可是我的package control出现了以下问题：<br>There are no packages available for installation<br><img src="https://img-blog.csdnimg.cn/20190129130551953.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>尝试辽各种解决方法！！还是没解决这个问题，如果有有能解决的帮帮窝，靴靴！！</li></ul><hr><p>没办法。只能手动安装插件辽。</p><p><strong>1.首先下载语法高亮插件vue-syntax-highlight。</strong><br>下载地址 <a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="noopener">https://github.com/vuejs/vue-syntax-highlight</a><br>解开压缩包vue-syntax-highlight-master，其内所有文件备用。</p><p><strong>2.将插件插入sublime</strong></p><ul><li>打开sublime的preferences—&gt;browse packages</li><li>在package文件夹下新建Vue文件夹</li><li>在Vue文件夹中，将vue-syntax-highlight-master压缩包解压后的所有文件考入。</li></ul><p><strong>3.sublime载入vue-syntax-highlight插件</strong><br>按下快捷键“ctrl+shift+p”，在打开的packages输入框中输入vue，选择“Set Syntax:Vue Component”进行加载。<br><img src="https://img-blog.csdnimg.cn/20190129131728744.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即可看到Vue文件高亮了<br><img src="https://img-blog.csdnimg.cn/20190129131905606.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般sublime按照vue插件步骤是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装Package Control&lt;/li&gt;
&lt;li&gt;Ctrl+Shift+P 执行Install Package&lt;/li&gt;
&lt;li&gt;安装Vue Syntax Highlight&lt;br&gt;可是我的packag
      
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack4学习笔记一</title>
    <link href="http://yoursite.com/2019/01/29/webpack41/"/>
    <id>http://yoursite.com/2019/01/29/webpack41/</id>
    <published>2019-01-29T15:48:31.454Z</published>
    <updated>2019-01-29T15:52:28.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p><h2 id="为什要使用WebPack"><a href="#为什要使用WebPack" class="headerlink" title="为什要使用WebPack"></a>为什要使用WebPack</h2><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p><ul><li>模块化，让我们可以把复杂的程序细化为小的文件;</li><li>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</li><li>Scss，less等CSS预处理器<br>…<br>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。<h2 id="学习使用Webpack。"><a href="#学习使用Webpack。" class="headerlink" title="学习使用Webpack。"></a>学习使用Webpack。</h2><h3 id="创建一个bundle文件"><a href="#创建一个bundle文件" class="headerlink" title="创建一个bundle文件"></a>创建一个bundle文件</h3>先创建一个用于学习的测试目录，初始化 npm，<blockquote><p>npm init -y<br>使用npm init命令可以自动创建package.json文件,这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。</p></blockquote></li></ul><p>然后在本地安装webpack</p><blockquote><p>npm install –save-dev webpack<br>太慢了 我推荐用淘宝镜像- -！！！cnpm</p></blockquote><p>==因为使用的是webpack 4+ 版本，还需要安装 CLI。==</p><blockquote><p>npm install –save-dev webpack-cli</p></blockquote><p>在我们的项目目录下，创建两个文件夹,src文件夹和dist文件夹，src文件夹用来存放原始数据和我们将写的JavaScript模块，dist文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个index.html文件）。</p><p>然后在public文件夹中创建index.html，在app文件夹中创建index.js。</p><p>这个例子在index.js中使用lodash 依赖，我们需要在本地安装 library：</p><blockquote><p>npm install –save lodash</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190128001838997.PNG" alt="在这里插入图片描述"><br>index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element=<span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    element.innerHTML=_.join([<span class="string">'hello'</span>,<span class="string">'webpack'</span>,<span class="string">' '</span>]);</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure><p>index.js 显式要求引入的 lodash 必须存在，然后将它绑定为 _（没有全局作用域污染）。通过声明模块所需的依赖，webpack 能够利用这些信息去构建依赖图，然后使用图生成一个优化过的，会以正确顺序执行的 bundle。</p><p>index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 npx webpack，会将我们的脚本作为入口起点，然后 输出 为 main.js。<br><img src="https://img-blog.csdnimg.cn/20190128002223748.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190128002122940.PNG" alt="在这里插入图片描述"></p><p>运行index.html<br><img src="https://img-blog.csdnimg.cn/20190128002953151.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="使用一个配置文件"><a href="#使用一个配置文件" class="headerlink" title="使用一个配置文件"></a>使用一个配置文件</h3><p>在 webpack 4 中，可以无须任何配置使用，然而大多数项目会需要很复杂的设置，这就是为什么 webpack 仍然要支持 配置文件。<br>我们创建webpack.config.js<br>webpack.config.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</span></span><br></pre></td></tr></table></figure><p>现在，让我们通过新配置文件再次执行构建：<br><img src="https://img-blog.csdnimg.cn/20190128012022554.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>比起 CLI 这种简单直接的使用方式，配置文件具有更多的灵活性。我们可以通过配置方式指定 loader 规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Webpack&quot;&gt;&lt;a href=&quot;#什么是Webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是Webpack&quot;&gt;&lt;/a&gt;什么是Webpack&lt;/h2&gt;&lt;p&gt;WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到Ja
      
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现简单动态轮播（二）</title>
    <link href="http://yoursite.com/2019/01/27/Lunbo1%20(2)/"/>
    <id>http://yoursite.com/2019/01/27/Lunbo1 (2)/</id>
    <published>2019-01-27T15:37:23.378Z</published>
    <updated>2019-02-17T05:53:07.161Z</updated>
    
    <content type="html"><![CDATA[<p>效果图：<img src="../images/20190125130820427.png" alt="1"><br>先看布局的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clear"</span> <span class="attr">style</span>=<span class="string">"left:-100%;"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"yy.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"5.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"yy.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pageNav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rightBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出这个轮播和我的前一篇轮播，布局的思路稍微不同。无缝轮播只放需要的图片，轮播时所看到的两张图片的left都改变。而这个轮播是把ul的宽设为所有图片加起来的长度，轮播时移动ul的left，并在第一张图片前放置最后一张图片，最后一张图片后放置第一张图片。</p><p>布局大体也一样，就是<strong>重点便是ul设置为500%。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500%</span>;</span><br><span class="line">    <span class="attribute">height</span>:  <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pageNav</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pageNav</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pageNav</span> <span class="selector-tag">a</span><span class="selector-class">.cur</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBtn</span>, <span class="selector-class">.rightBtn</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-50%);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBtn</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rightBtn</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBtn</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.rightBtn</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(0, 0, 0, 0.8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是js部分，思路也很相似，移动的元素不一样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先获取所需要的dom元素</span></span><br><span class="line"><span class="keyword">var</span> banner=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"banner"</span>)[<span class="number">0</span>], ul=banner.getElementsByTagName(<span class="string">"ul"</span>);[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> li=ul.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> pageNav=banner.getElementsByClassName(<span class="string">"pageNav"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> leftBtn=banner.getElementsByClassName(<span class="string">"leftBtn"</span>)[<span class="number">0</span>],rightBtn=banner.getElementsByClassName(<span class="string">"rightBtn"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> n=<span class="number">0</span>,timerElem,animate=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//添加分页按钮</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;li.length<span class="number">-2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> pageA=<span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                pageA.className=<span class="string">"cur"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pageNav.appendChild(pageA);</span><br><span class="line">        &#125;</span><br><span class="line">        pageNav.addEventListener(<span class="string">'click'</span>,pageNavClick,<span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">pageNavClick</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e=e||<span class="built_in">window</span>.event;<span class="comment">//兼容性考虑</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;li.length<span class="number">-2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(pageNav.children[j]==e.target)&#123;</span><br><span class="line">                    <span class="keyword">var</span> offset=(j-n)*(<span class="number">-100</span>);</span><br><span class="line">                    btnShow(j);</span><br><span class="line">                    n=j;</span><br><span class="line">                    showImg(offset);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//分页按钮函数</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">btnShow</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;li.length<span class="number">-2</span>;a++)&#123;</span><br><span class="line">                pageNav.children[a].className=<span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pageNav.children[index].className=<span class="string">"cur"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params">offset</span>)</span>&#123;</span><br><span class="line">            clearInterval(timerElem);<span class="comment">//记得清除计时器，要不然多个计时器叠加，效果会出现问题。</span></span><br><span class="line">            <span class="keyword">var</span> speed=offset/<span class="number">20</span>;</span><br><span class="line">            <span class="keyword">var</span> newLeft=<span class="built_in">parseInt</span>(ul.style.left)+offset;</span><br><span class="line">            timerElem=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">parseInt</span>(ul.style.left)==newLeft)&#123;</span><br><span class="line">                    clearInterval(timerElem);</span><br><span class="line">                    <span class="comment">// 当第三张开始滑动时，屏幕接着它滑动的是放置在它后面的假的第一张，所以滑动结束之后要把位置从转回真的第一张</span></span><br><span class="line">                    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">                            ul.style.left=<span class="string">"-100%"</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==li.length<span class="number">-3</span>)&#123;</span><br><span class="line">                            ul.style.left=(<span class="number">-100</span>)*(li.length<span class="number">-2</span>)+<span class="string">"%"</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            ul.style.left=newLeft+<span class="string">"%"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    animate=<span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    animate=<span class="literal">true</span>;</span><br><span class="line">                     ul.style.left=<span class="built_in">parseInt</span>(ul.style.left)+speed+<span class="string">"%"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">50</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        rightBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(animate)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">            <span class="keyword">if</span>(n&gt;=li.length<span class="number">-2</span>)&#123;</span><br><span class="line">                n=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            btnShow(n);</span><br><span class="line">            showImg(<span class="number">-100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        leftBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(animate)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n--;</span><br><span class="line">            <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                n=li.length<span class="number">-3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            btnShow(n);</span><br><span class="line">            showImg(<span class="number">-100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> timer=setInterval(autoLunbo,<span class="number">3000</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">autoLunbo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            rightBtn.onclick();</span><br><span class="line">        &#125;</span><br><span class="line">        banner.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        banner.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            timer=setInterval(autoLunbo,<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;效果图：&lt;img src=&quot;../images/20190125130820427.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;先看布局的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>原生JS实现动态轮播（一）无缝轮播</title>
    <link href="http://yoursite.com/2019/01/23/Lunbo/"/>
    <id>http://yoursite.com/2019/01/23/Lunbo/</id>
    <published>2019-01-23T13:46:25.025Z</published>
    <updated>2019-02-17T06:00:00.982Z</updated>
    
    <content type="html"><![CDATA[<p>学无止境加油吧！</p><hr><p><img src="../images/20190123213007715.png" alt="在这里插入图片描述"><br>效果图是这样的，我们需要定义一个div，并放入三张图片，还需要左右两个按钮，以及底下三个按钮三个div。<br>先看布局代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">"banner"</span> <span class="attr">id</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"clear"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"left:0"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"k1.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"left:100%"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"k-2.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"left:100%"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"k-3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pageNav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rightBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何是css部分</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">390px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">390px</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>:none;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.banner</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pageNav</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pageNav</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pageNav</span> <span class="selector-tag">a</span><span class="selector-class">.cur</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBtn</span>, <span class="selector-class">.rightBtn</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-50%);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBtn</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rightBtn</span>&#123;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftBtn</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.rightBtn</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(0, 0, 0, 0.8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是js部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> banner=<span class="built_in">document</span>.getElementById(<span class="string">"banner"</span>);</span><br><span class="line">    <span class="keyword">var</span> ul=banner.getElementsByTagName(<span class="string">"ul"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> li=ul.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">    <span class="keyword">var</span> pageNav=banner.getElementsByClassName(<span class="string">"pageNav"</span>)[<span class="number">0</span>],leftBtn=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"leftBtn"</span>)[<span class="number">0</span>],rightBtn=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"rightBtn"</span>)[<span class="number">0</span>],n=<span class="number">0</span>,index=<span class="number">0</span>,timerElem=<span class="literal">null</span>,state=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;li.length;i++)&#123;<span class="comment">//给图片底下添加按钮</span></span><br><span class="line">        pageA=<span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">            pageA.className=<span class="string">"cur"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pageNav.appendChild(pageA);</span><br><span class="line">    &#125;</span><br><span class="line">    pageNav.addEventListener(<span class="string">'click'</span>,pageNavClick,<span class="literal">false</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pageNavClick</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        e=e||<span class="built_in">window</span>.event;<span class="comment">//兼容性考虑</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;li.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pageNav.children[i]==e.target)&#123;</span><br><span class="line">                index=n;</span><br><span class="line">                <span class="keyword">var</span> offset=i-n;</span><br><span class="line">                n=i;</span><br><span class="line">                showBtn(n);</span><br><span class="line">                <span class="keyword">if</span>(offset&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    showImg(<span class="number">-100</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    showImg(<span class="number">100</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showBtn</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> z=<span class="number">0</span>;z&lt;li.length;z++)&#123;</span><br><span class="line">            pageNav.children[z].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pageNav.children[index].className=<span class="string">"cur"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span>(<span class="params">offset</span>)</span>&#123;</span><br><span class="line">        clearInterval(timerElem);</span><br><span class="line">        <span class="keyword">var</span> speed=offset/<span class="number">20</span>;</span><br><span class="line">        timerElem=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            state=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">parseInt</span>(li[n].style.left)==<span class="number">0</span>)&#123;</span><br><span class="line">                state=<span class="literal">false</span>;</span><br><span class="line">                clearInterval(timerElem);</span><br><span class="line">                li[n].style.left=<span class="string">"0"</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> l=<span class="number">0</span>;l&lt;n;l++)&#123;</span><br><span class="line">                    li[l].style.left=<span class="string">"-100%"</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> r=n+<span class="number">1</span>;r&lt;li.length;r++)&#123;</span><br><span class="line">                    li[r].style.left=<span class="string">"100%"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                li[n].style.left=<span class="built_in">parseInt</span>(li[n].style.left)+speed+<span class="string">"%"</span>;</span><br><span class="line">                li[index].style.left=<span class="built_in">parseInt</span>(li[index].style.left)+speed+<span class="string">"%"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    leftBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index=n;</span><br><span class="line">        n--;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            n=li.length<span class="number">-1</span>;</span><br><span class="line">            li[n].style.left=<span class="string">"-100%"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        showBtn(n);</span><br><span class="line">        showImg(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rightBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(state)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        index=n;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;li.length-</span><br><span class="line">            <span class="number">1</span>)&#123;</span><br><span class="line">            n=<span class="number">0</span>;</span><br><span class="line">            li[n].style.left=<span class="string">"100%"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        showBtn(n);</span><br><span class="line">        showImg(<span class="number">-100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> timer;</span><br><span class="line">    timer=setInterval(autoLunbo,<span class="number">3000</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoLunbo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        rightBtn.onclick();</span><br><span class="line">    &#125;</span><br><span class="line">    banner.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    banner.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        timer=setInterval(autoLunbo,<span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学无止境加油吧！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;../images/20190123213007715.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;效果图是这样的，我们需要定义一个div，并放入三张图片，还需要左右两个按钮，以及底下三个按钮三个div。&lt;
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>单例模式学习笔记</title>
    <link href="http://yoursite.com/2019/01/21/singleEg/"/>
    <id>http://yoursite.com/2019/01/21/singleEg/</id>
    <published>2019-01-21T14:57:40.277Z</published>
    <updated>2019-01-21T14:59:43.093Z</updated>
    
    <content type="html"><![CDATA[<p>今天的学习jquery组件开发时候例子使用了单例模式，所以总结了一些相关知识。<img src="https://img-blog.csdnimg.cn/20190119113536797.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><h3 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h3><p>首先什么是单例模式？可以这样理解：单例模式旨在保证一个类仅有一个实例，并提供一个全局的访问点。<br>可能有人还是不太理解单例的概念，那么你可以想象生活中的一些例子。比如注册账号的时候，如果我们注册的账号已经存在，那么系统会提示我们“账号已经存在是否使用该账号登陆”，我们无法再次创建一个一模一样的账号，除非把原账号注销。这就是单例模式的生动体现。</p><h3 id="单例模式的思路"><a href="#单例模式的思路" class="headerlink" title="单例模式的思路"></a>单例模式的思路</h3><p> 一个类能返回一个对象的引用（并且永远是同一个）和一个获得该实例的方法（静态方法，通常使用 getInstance 名称）。那么当我们调用这个方法时，如果类持有的引用不为空就返回该引用，否者就创建该类的实例，并且将实例引用赋值给该类保持的那个引用再返回。同时将该类的构造函数定义为私有方法，避免其他函数使用该构造函数来实例化对象，只通过该类的静态方法来得到该类的唯一实例。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。<ul><li>主要解决：一个全局使用的类频繁地创建与销毁。</li></ul></li><li>何时使用：当您想控制实例数目，节省系统资源的时候。</li><li>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</li><li>关键代码：构造函数是私有的。</li><li>应用实例： 1、一个党只能有一个书记。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li><li>优点： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</li><li>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li><li>使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li><li>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</li></ul><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>例如jQuery库的命名空间为jQuery或$。命名空间的使用是为了让代码更加整洁，在多人协作开发的情况下，不同的人定义的变量很有可能重复，此时就需要使用命名空间来约束每个人定义的变量，使相同名称的变量放在不同的命名空间中，避免相互干扰。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// A程序员的命名空间</span><br><span class="line">var A = &#123;</span><br><span class="line">  get: function(id)&#123;</span><br><span class="line">    return document.getElementById(id);</span><br><span class="line">  &#125;</span><br><span class="line">  css: function(id,key,value)&#123;</span><br><span class="line">    get(id).style[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// B程序员的命名空间</span><br><span class="line">var B = &#123;</span><br><span class="line">  get: function(className)&#123;</span><br><span class="line">    return document.getElementByClassName(className)[0];</span><br><span class="line">  &#125;</span><br><span class="line">  css: function(className,key,value)&#123;</span><br><span class="line">    get(className).style[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A、    B两个命名空间中都有一个get方法和一个css方法，用于元素获取和元素样式修改，不同的是A是通过id来获取元素，而B是通过class来获取元素，通过命名空间，可以使这些相同名称的方法共存，使用时指定相应的命名空间即可。</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>JavaScript中并没有final、static这类关键字用来定义常量，但JavaScript非常灵活，通过常量只能访问不能修改这一特点，我们可以将变量保存在函数内部，并且只提供获取变量的方法，不提供设置变量的方法，通过闭包的方式使函数执行一次并返回相应的访问方法对象，最后将这个对象放在全局空间中作为常量单例对象使用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var Color = (function()&#123;</span><br><span class="line">  // 私有变量</span><br><span class="line">  var color = &#123;</span><br><span class="line">    &apos;RED&apos;: &apos;#ff0000&apos;,</span><br><span class="line">    &apos;YELLOW&apos;: &apos;#ffff00&apos;,</span><br><span class="line">    &apos;BLUE&apos;: &apos;#0000ff&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  // 返回访问方法对象</span><br><span class="line">  return &#123;</span><br><span class="line">    // 常量获取方法</span><br><span class="line">    get: function(name)&#123;</span><br><span class="line">      return color[name] ? color[name] : null;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">var color = Color.get(&apos;BLUE&apos;);</span><br><span class="line">console.log(color);  // #0000ff</span><br></pre></td></tr></table></figure><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><h4 id="实现1：-最简单的对象字面量"><a href="#实现1：-最简单的对象字面量" class="headerlink" title="实现1： 最简单的对象字面量"></a>实现1： 最简单的对象字面量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var singleton = &#123;</span><br><span class="line">        attr : 1,</span><br><span class="line">        method : function()&#123; return this.attr; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">var t1 = singleton ;</span><br><span class="line">var t2 = singleton ;</span><br><span class="line">    那么很显然的， t1 === t2 。</span><br></pre></td></tr></table></figure><p>  十分简单，并且非常使用，不足之处在于没有什么封装性，所有的属性方法都是暴露的。对于一些需要使用私有变量的情况就显得心有余而力不足了。当然在对于 this 的问题上也是有一定弊端的。</p><h4 id="实现2：构造函数内部判断"><a href="#实现2：构造函数内部判断" class="headerlink" title="实现2：构造函数内部判断"></a>实现2：构造函数内部判断</h4><p> 其实和最初的JS实现有点类似，不过是将对是否已经存在该类的实例的判断放入构造函数内部。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Construct()&#123;</span><br><span class="line">    // 确保只有单例</span><br><span class="line">    if( Construct.unique !== undefined )&#123;</span><br><span class="line">        return Construct.unique;</span><br><span class="line">    &#125;</span><br><span class="line">    // 其他代码</span><br><span class="line">    this.name = &quot;NYF&quot;;</span><br><span class="line">    this.age=&quot;24&quot;;</span><br><span class="line">    Construct.unique = this;</span><br><span class="line">&#125;</span><br><span class="line">var t1 = new Construct() ;</span><br><span class="line">var t2 = new Construct() ;</span><br><span class="line">    那么也有的， t1 === t2 。</span><br></pre></td></tr></table></figure></p><p>也是非常简单，无非就是提出一个属性来做判断，但是该方式也没有安全性，一旦我在外部修改了Construct的unique属性，那么单例模式也就被破坏了。</p><h4 id="实现3-闭包方式"><a href="#实现3-闭包方式" class="headerlink" title="实现3 : 闭包方式"></a>实现3 : 闭包方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var single = (function()&#123;</span><br><span class="line">    var unique;</span><br><span class="line">    function Construct()&#123;</span><br><span class="line">        // ... 生成单例的构造函数的代码</span><br><span class="line">    &#125;</span><br><span class="line">    unique = new Constuct();</span><br><span class="line">    return unique;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>只要每次将var t1 = single; var t2 = single;即可。 与对象字面量方式类似。不过相对而言更安全一点，当然也不是绝对安全。<br>    如果希望会用调用 single() 方式来使用，那么也只需要将内部的 return 改为</p><pre><code>return function(){    return unique;}以上方式也可以使用 new 的方式来进行（形式主义的赶脚）。当然这边只是给了闭包的一种例子而已，也可以在 Construct 中判断单例是否存在 等等。 各种方式在各个不同情况做好选着即可。</code></pre><blockquote><p>使用数据缓存来存储该单例，用作判断单例是否已经生成，是单例模式主要的实现思路。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的学习jquery组件开发时候例子使用了单例模式，所以总结了一些相关知识。&lt;img src=&quot;https://img-blog.csdnimg.cn/20190119113536797.PNG?x-oss-process=image/watermark,type_ZmF
      
    
    </summary>
    
      <category term="Computer Basics" scheme="http://yoursite.com/categories/Computer-Basics/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原生JS购物网站商品放大镜功能</title>
    <link href="http://yoursite.com/2019/01/14/zoom/"/>
    <id>http://yoursite.com/2019/01/14/zoom/</id>
    <published>2019-01-14T02:59:29.605Z</published>
    <updated>2019-02-17T05:54:06.803Z</updated>
    
    <content type="html"><![CDATA[<p>首先看效果图：<img src="../images/20190111225500624.png" alt="在这里插入图片描述"><br>先是布局，左边一个小图框，包含一个鼠标移动框，右边一个放大框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"small3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"move"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"big3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写一下css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.small</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.small</span> <span class="selector-class">.move</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0,0,0,0.4);</span><br><span class="line">    <span class="attribute">cursor</span>:move;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.big</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.big</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js部分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box=<span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>)[<span class="number">0</span>],small=box.getElementsByClassName(<span class="string">'small'</span>)[<span class="number">0</span>],move=small.getElementsByClassName(<span class="string">'move'</span>)[<span class="number">0</span>],smallImg=small.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>],big=box.getElementsByClassName(<span class="string">'big'</span>)[<span class="number">0</span>],bigImg=big.getElementsByTagName(<span class="string">'img'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//首先把需要的元素都获取出来</span></span><br><span class="line">small.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    move.style.display=<span class="string">'block'</span>;</span><br><span class="line">    big.style.display=<span class="string">"block"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">small.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    move.style.display=<span class="string">'none'</span>;</span><br><span class="line">    big.style.display=<span class="string">"none"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">small.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e=e||<span class="built_in">window</span>.event;<span class="comment">//兼容性考虑</span></span><br><span class="line">    <span class="keyword">var</span> x=e.clientX-smallImg.getBoundingClientRect().left-move.offsetWidth/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> y=e.clientY-smallImg.getBoundingClientRect().top-move.offsetHeight/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;smallImg.offsetWidth-move.offsetWidth)&#123;</span><br><span class="line">        x=smallImg.offsetWidth-move.offsetWidth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y&gt;smallImg.offsetHeight-move.offsetHeight)&#123;</span><br><span class="line">        y=smallImg.offsetHeight-move.offsetHeight;</span><br><span class="line">    &#125;</span><br><span class="line">    move.style.left=x+<span class="string">"px"</span>;</span><br><span class="line">    move.style.top=y+<span class="string">"px"</span>;</span><br><span class="line">    <span class="comment">//实现左边move块跟随鼠标移动的代码</span></span><br><span class="line">    <span class="keyword">var</span> scale=bigImg.offsetWidth/smallImg.offsetWidth;</span><br><span class="line">    <span class="comment">//按照比例放大</span></span><br><span class="line">    bigImg.style.left=<span class="string">'-'</span>+x*scale+<span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">//因为图片是需要左移和上移的所以要加负号</span></span><br><span class="line">    bigImg.style.top=<span class="string">'-'</span>+y*scale+<span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放大镜效果就实现啦！<br><img src="https://img-blog.csdnimg.cn/2019011122541538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先看效果图：&lt;img src=&quot;../images/20190111225500624.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;先是布局，左边一个小图框，包含一个鼠标移动框，右边一个放大框。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery $.extend()使用方法总结</title>
    <link href="http://yoursite.com/2019/01/14/jQuery-extend()/"/>
    <id>http://yoursite.com/2019/01/14/jQuery-extend()/</id>
    <published>2019-01-14T02:59:05.906Z</published>
    <updated>2019-01-14T03:02:17.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="extend能实现的功能"><a href="#extend能实现的功能" class="headerlink" title="extend能实现的功能"></a>extend能实现的功能</h2><h3 id="将一个或多个对象的内容合并到目标对象。"><a href="#将一个或多个对象的内容合并到目标对象。" class="headerlink" title="将一个或多个对象的内容合并到目标对象。"></a>将一个或多个对象的内容合并到目标对象。</h3><p>语法：</p><blockquote><p>$.extend( target [, object1 ] [, objectN ] )；<br>$.extend( [deep ], target, object1 [, objectN ] )</p></blockquote><ul><li>deep：    可选。 Boolean类型 指示是否深度合并对象，默认为false。如果该值为true，且多个对象的某个同名属性也都是对象，则该”属性对象”的属性也将进行合并。</li><li>target：    Object类型 目标对象，其他对象的成员属性将被附加到该对象上。</li><li>object1：可选。 Object类型 第一个被合并的对象。</li><li>objectN：可选。 Object类型 第N个被合并的对象。<br><strong>注意：</strong><ol><li>如果只为$.extend()指定了一个参数，则意味着参数target被省略。此时，target就是jQuery对象本身。通过这种方式，我们可以为全局对象jQuery添加新的函数。</li><li>如果多个对象具有相同的属性，则后者会覆盖前者的属性值。</li></ol></li></ul><p><strong>举例：</strong><br> $.extend(object1, object2); //object2 合并到 object1 中<br> 多传几个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function test(target,obj1,obj2,obj3)&#123;</span><br><span class="line">    $.extend(target,obj1,obj2,obj3);</span><br><span class="line">    return target;</span><br><span class="line">&#125;;</span><br><span class="line">var target=&#123;</span><br><span class="line">    name:&apos;jack&apos;,</span><br><span class="line">    sex:&apos;male&apos;</span><br><span class="line">&#125;;</span><br><span class="line">var obj1=&#123;</span><br><span class="line">    name:&quot;rose&quot;,</span><br><span class="line">    age:20</span><br><span class="line">&#125;;</span><br><span class="line">var obj2=&#123;</span><br><span class="line">    sex:&apos;female&apos;,</span><br><span class="line">    age:24</span><br><span class="line">&#125;;</span><br><span class="line">var obj3=&#123;</span><br><span class="line">    bb:&apos;you jump i jump&apos;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(test(target,obj1,obj2,obj3));</span><br><span class="line">//Object &#123; name: &quot;rose&quot;, sex: &quot;female&quot;, age: 24, bb: &quot;you jump i jump&quot; &#125;</span><br></pre></td></tr></table></figure><p>这里我们传入了4个参数，然后返回第一个参数的值。从运行的得到结果我们可以看到，属性值永远是最后一个属性的值。<br>我们稍微修改一部分代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">        var res=$.extend(target,obj1,obj2,obj3);</span><br><span class="line">        return res;</span><br><span class="line">结果返回依然是Object &#123; name: &quot;rose&quot;, sex: &quot;female&quot;, age: 24, bb: &quot;you jump i jump&quot; &#125;</span><br></pre></td></tr></table></figure><p>所以$.extend()的返回值是第一个参数的值。<br>如果我们不想修改参数的值，我们可以把传入一个空对象：</p><blockquote><p>$.extend({ },target,obj1,obj2,obj3);</p></blockquote><h3 id="为jQuery开发插件提供方法"><a href="#为jQuery开发插件提供方法" class="headerlink" title="为jQuery开发插件提供方法"></a>为jQuery开发插件提供方法</h3><p>如果只有一个参数提供给$.extend()，在这种情况下，jQuery对象本身被默认为目标对象。这样，我们可以在jQuery的命名空间下添加新的功能。这对于插件开发者希望向 jQuery 中添加新函数时是很有用的。</p><h4 id="jQuery-extend-object-："><a href="#jQuery-extend-object-：" class="headerlink" title="jQuery.extend(object)："></a>jQuery.extend(object)：</h4><p> 为jQuery类本身添加类方法，可以理解为添加静态方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">    hello:function()&#123;</span><br><span class="line">        return &quot;hello&quot;+this._name;</span><br><span class="line">    &#125;,</span><br><span class="line">    _name:&apos;jack&apos;</span><br><span class="line">&#125;)</span><br><span class="line">console.log($._name,$.hello());</span><br><span class="line">//jack hellojack</span><br></pre></td></tr></table></figure><p>　</p><h4 id="jQuery-fn-extend-object"><a href="#jQuery-fn-extend-object" class="headerlink" title="jQuery.fn.extend(object);"></a>jQuery.fn.extend(object);</h4><p>给jQuery对象添加方法。。jQuery类的实例才可以调用这个“成员函数”。为什么呢我们先看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">　　　init: function( selector, context ) &#123;//….</span><br><span class="line">//……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>．ｆｎ属性是在原型上的，所以只有实例化出来的jQuery可以调用你ｅｘｔｅｎｄ里想添加的方法。<br>  比如我们要开发一个插件，做一个特殊的编辑框，当它被点击时，便alert 当前编辑框里的内容。可以这么做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.fn.extend(&#123;</span><br><span class="line">    alertWhileClick: function() &#123;</span><br><span class="line">        $(this).click(function() &#123;</span><br><span class="line">            alert($(this).val());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">//$(&quot;#input1&quot;)是jQuery的实例，调用这个扩展方法</span><br><span class="line">$(&quot;#input1&quot;).alertWhileClick();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;extend能实现的功能&quot;&gt;&lt;a href=&quot;#extend能实现的功能&quot; class=&quot;headerlink&quot; title=&quot;extend能实现的功能&quot;&gt;&lt;/a&gt;extend能实现的功能&lt;/h2&gt;&lt;h3 id=&quot;将一个或多个对象的内容合并到目标对象。&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>原生javascript实现星级评价功能</title>
    <link href="http://yoursite.com/2019/01/11/star_js/"/>
    <id>http://yoursite.com/2019/01/11/star_js/</id>
    <published>2019-01-10T16:01:55.376Z</published>
    <updated>2019-02-17T05:20:54.666Z</updated>
    
    <content type="html"><![CDATA[<p>因为用到自定义字体，我首先到阿里巴巴矢量图标库下载了自己喜欢的星星样式。需要一个空心星星，一个实心星星。</p><hr><p>按照使用方法，如下图所示引入这些文件。<br><img src="https://img-blog.csdnimg.cn/20190110230019434.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><hr><p>接下来是布局，三行评价，都是一样的样式，那就用一个无序列表吧！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"goods"</span>&gt;</span></span><br><span class="line">        宝贝与描述相符：</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"att"</span>&gt;</span></span><br><span class="line">        卖家的服务态度：</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"trans"</span>&gt;</span></span><br><span class="line">        物流服务的质量：</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"star"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>给star类加了一个伪类用来显示星星图标：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.star</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">     <span class="attribute">font-family</span>: <span class="string">'Hui-iconfont'</span>;</span><br><span class="line">     <span class="attribute">font-size</span>:<span class="number">25px</span>;</span><br><span class="line">     <span class="attribute">font-style</span>:normal;</span><br><span class="line">     <span class="attribute">content</span>:<span class="string">"\e702"</span>;</span><br><span class="line">     <span class="attribute">vertical-align</span>:middle;<span class="comment">/*使文字和图标对齐*/</span></span><br><span class="line">     <span class="attribute">color</span>:<span class="number">#eee</span>;</span><br><span class="line"> &#125;</span><br><span class="line">下面这是实心星星的：</span><br><span class="line"> <span class="selector-class">.current</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">     <span class="attribute">font-family</span>: <span class="string">'Hui-iconfont'</span>;</span><br><span class="line">     <span class="attribute">font-size</span>:<span class="number">25px</span>;</span><br><span class="line">     <span class="attribute">font-style</span>:normal;</span><br><span class="line">     <span class="attribute">content</span>:<span class="string">"\e6ff"</span>;</span><br><span class="line">     <span class="attribute">vertical-align</span>:middle;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>布局完是这样的：<br><img src="https://img-blog.csdnimg.cn/20190110231346377.PNG" alt="在这里插入图片描述"><br>下面开始写js.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comment</span>(<span class="params">liName,content</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> li=<span class="built_in">document</span>.getElementsByClassName(liName)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> star=li.getElementsByTagName(<span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">var</span> currentClick=<span class="number">0</span>,num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=star.length;i++)&#123;</span><br><span class="line">        star[i<span class="number">-1</span>].index=i;</span><br><span class="line">        star[i<span class="number">-1</span>].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            show(<span class="keyword">this</span>.index);</span><br><span class="line">        &#125;</span><br><span class="line">        star[i<span class="number">-1</span>].onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//选择i=1；就是为了把0让给这一步，鼠标移开不显示实星星。</span></span><br><span class="line">            show(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        star[i<span class="number">-1</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            currentClick=<span class="keyword">this</span>.index;</span><br><span class="line">            show(currentClick);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当点击后，又经过又离开，传递参数0；但短路语句直接返回currentClick,以此保证点击之后再经过也不改变。</span></span><br><span class="line">        num=index||currentClick;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;star.length;j++)&#123;</span><br><span class="line">            star[j].className=(j&lt;num)?<span class="string">'current'</span>:<span class="string">'star'</span>;</span><br><span class="line">            <span class="keyword">if</span>(num==<span class="number">1</span>||num==<span class="number">2</span>)&#123;</span><br><span class="line">                star[j].style.color=<span class="string">"#666"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num==<span class="number">3</span>||num==<span class="number">4</span>)&#123;</span><br><span class="line">                star[j].style.color=<span class="string">"orange"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                star[j].style.color=<span class="string">"red"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    li.getElementsByTagName(<span class="string">"em"</span>)[<span class="number">0</span>].innerText=num&gt;<span class="number">0</span>?content[num<span class="number">-1</span>]:<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="string">"一分 失望"</span>,<span class="string">"两分 不满"</span>,<span class="string">"三分 一般"</span>,<span class="string">"四分 满意"</span>,<span class="string">"五分 惊喜"</span>];</span><br><span class="line">comment(<span class="string">"goods"</span>,arr);</span><br><span class="line">comment(<span class="string">"att"</span>,arr);</span><br><span class="line">comment(<span class="string">"trans"</span>,arr)</span><br></pre></td></tr></table></figure><p>就可以实现基本的效果啦！<br><img src="https://img-blog.csdnimg.cn/20190110235843639.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190110235858763.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190110235909966.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为用到自定义字体，我首先到阿里巴巴矢量图标库下载了自己喜欢的星星样式。需要一个空心星星，一个实心星星。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;按照使用方法，如下图所示引入这些文件。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190110230
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery基础之Dom篇总结</title>
    <link href="http://yoursite.com/2019/01/08/jQuery_Dom/"/>
    <id>http://yoursite.com/2019/01/08/jQuery_Dom/</id>
    <published>2019-01-08T14:08:25.358Z</published>
    <updated>2019-01-08T14:10:19.546Z</updated>
    
    <content type="html"><![CDATA[<p>dom小知识点很多，总是过段时间又忘了，这次做个总结吧。</p><hr><h2 id="Dom节点的创建"><a href="#Dom节点的创建" class="headerlink" title="Dom节点的创建"></a>Dom节点的创建</h2><p>jQuery节点创建常见的就是直接把这个节点的结构给通过HTML标记字符串描述出来。<br>创建元素节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;&lt;div&gt;&lt;/div&gt;&quot;)</span><br><span class="line"></span><br><span class="line">创建文本节点：</span><br><span class="line">$(&quot;&lt;div&gt;我是文本节点&lt;/div&gt;&quot;)</span><br><span class="line"></span><br><span class="line">创建属性节点：</span><br><span class="line">$(&quot;&lt;div id=&apos;test&apos; class=&apos;aaron&apos;&gt;我是文本节点&lt;/div&gt;&quot;)</span><br></pre></td></tr></table></figure><h2 id="Dom节点的插入"><a href="#Dom节点的插入" class="headerlink" title="Dom节点的插入"></a>Dom节点的插入</h2><h3 id="内部插入"><a href="#内部插入" class="headerlink" title="内部插入"></a>内部插入</h3><p>.append()前面是被插入的对象，后面是要在对象内插入的元素内容<br>.appendTo()前面是要插入的元素内容，而后面是被插入的对象<br>.prepend()方法将指定元素插入到匹配元素里面作为它的第一个子元素<br>.prependTo()方法前面是要插入的元素内容，后面是被插入的对象，插到之前。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  例子</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过append与appendTo添加元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>点击通过jQuery的append添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span>&gt;</span>点击通过jQuery的appendTo添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#btn1"</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.content'</span>).append($(<span class="string">'&lt;div class="append"&gt;通过append方法添加的元素&lt;/div&gt;'</span>))</span></span><br><span class="line"><span class="xml">        // $('.content').prepend($('<span class="tag">&lt;<span class="name">p</span>&gt;</span>prepend方法插入的元素！在前面哦！<span class="tag">&lt;/<span class="name">p</span>&gt;</span>'))</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn2'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'&lt;div class="appendTo"&gt;通过appendTo方法添加的元素&lt;/div&gt;'</span>).appendTo($(<span class="string">'.content'</span>))</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="外部插入"><a href="#外部插入" class="headerlink" title="外部插入"></a>外部插入</h3><p>.before():在选中元素后插入参数所指定的内容，作为其兄弟节点<br>.after():在选中元素前插入参数所指定的内容，作为其兄弟节点</p><p>before与after都是用来对相对选中元素外部增加相邻的兄弟节点<br>2个方法都是都可以接收HTML字符串，DOM 元素，元素数组，或者jQuery对象，用来插入到集合中每个匹配元素的前面或者后面<br>2个方法都支持多个参数传递after(div1,div2,….)</p><p>insertAfter()与insertBefore()<br>insertBefore()和before的效果是一样的，只不过使用方式不一样。<br>insertBefore():插入的内容在前，括号里是要插入的节点。<br>不支持多参数！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">例子</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>通过insertBefore与insertAfter添加元素<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt1"</span>&gt;</span>点击通过jQuery的insertBefore添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"bt2"</span>&gt;</span>点击通过jQuery的insertAfter添加元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaron"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>测试insertBefore,不支持多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aaron"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test2"</span>&gt;</span>测试insertAfter,不支持多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#bt1'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="xml">        $('<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>测试insertBefore方法增加<span class="tag">&lt;/<span class="name">p</span>&gt;</span>', '<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>多参数<span class="tag">&lt;/<span class="name">p</span>&gt;</span>').insertBefore($(".test1"));</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Dom节点的删除"><a href="#Dom节点的删除" class="headerlink" title="Dom节点的删除"></a>Dom节点的删除</h2><p>empty():顾名思义，清空方法，但是与删除又有点不一样，因为它只移除了指定元素中的所有子节点。<br> remove()会将元素自身移除，同时也会移除元素内部的一切，包括绑定的事件及与该元素相关的jQuery数据。remove可以传递一个选择器表达式用来过滤匹配元素，可以选择性的删除指定的节点<br> 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;p&quot;).remove(&quot;:contains(&apos;3&apos;)&quot;) 移除所有元素中包含3文本的</span><br><span class="line"> 此代码也可以写为：</span><br><span class="line"> $(&quot;p&quot;).filter(&quot;:contains(&apos;3&apos;)&quot;).remove()</span><br></pre></td></tr></table></figure><p> 保留数据的删除操作detach()：<br> 这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来。</p><p>$(“div”).detach()这一句会移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了。detach方法是JQuery特有的，所以它只能处理通过JQuery的方法绑定的事件或者数据。</p><h2 id="Dom节点的复制与替换"><a href="#Dom节点的复制与替换" class="headerlink" title="Dom节点的复制与替换"></a>Dom节点的复制与替换</h2><ol><li>clone（）：<br>.clone() 复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点。通过clone(ture)传递一个布尔值ture用来指定，这样不仅仅只是克隆单纯的节点结构，还要把附带的事件与数据给一并克隆了。.clone()是浅拷贝。 .clone(true)是深拷贝。复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点。通过clone(ture)传递一个布尔值ture用来指定，这样不仅仅只是克隆单纯的节点结构，还要把附带的事件与数据给一并克隆了。.clone()是浅拷贝。 .clone(true)是深拷贝。</li><li>replaceWith(), .replaceAll( target ):<br>.replaceWith( newContent )：用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合.replaceWith( newContent )：用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合<br>.replaceAll( target ) ：用集合的匹配元素替换每个目标元素<br>.replaceAll()和.replaceWith()功能类似，主要是目标和源的位置区别<br>replaceWith()与.replaceAll() 方法会删除与节点相关联的所有数据和事件处理程序<br>.replaceWith（）方法，和大部分其他jQuery方法一样，返回jQuery对象，所以可以和其他方法链接使用。返回的是Jquery对象引用的是替换前的节点。</li><li>wrap()方法:<br>.wrap( wrappingElement )：在集合中匹配的每个元素周围包裹<br>.wrap( function ) ：一个回调函数，返回用于包裹匹配元素的HTML 内容或 jQuery 对象。</li><li>unwrap()方法:<br>作用与wrap方法是相反的。将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。</li><li>wrapAll()方法:<br>wrap是针对单个dom元素处理，如果要将集合中的元素用其他元素包裹起来，也就是给他们增加一个父元素，针对这样的处理，JQuery提供了一个wrapAll方法<br>.wrapAll( wrappingElement )：给集合中匹配的元素增加一个外面包裹HTML结构<br>.wrapAll( function ) ：一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象。</li><li>.wrapInner( wrappingElement )：<br>.wrapInner( wrappingElement )： 给集合中匹配的元素的内部，增加包裹的HTML结构给集合中匹配的元素的内部，增加包裹的HTML结构<br>将合集中的元素内部所有的子元素用其他元素包裹起来，并当作指定元素的子元素。<br>.wrapInner( function ) ：允许我们用一个callback函数做参数，每次遇到匹配元素时，该函数被执行，返回一个DOM元素，jQuery对象，或者HTML片段，用来包住匹配元素的内容<br>注意：<br>  当通过一个选择器字符串传递给.wrapInner() 函数，其参数应该是格式正确的 HTML，并且 HTML 标签应该是被正确关闭的。<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2>后代：<br>children() 方法返回被选元素的所有直接子元素。该方法只会向下一级对DOM 树进行遍历。<br>.children()方法选择性地接受同一类型选择器表达式<br>例如：$(“div”).children(“.selected”)<br>因为jQuery是合集对象，可能需要对这个合集对象进行一定的筛选，找出目标元素，所以允许传一个选择器的表达式</li></ol><p>find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。<br>选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所有后代元素的取回，可以传递通配选择器 ‘*’。<br>选择器 context 是由 .find() 方法实现的；因此，$(‘.item-ii’).find(‘li’) 等价于 $(‘li’, ‘.item-ii’)(找到类名为item-ii的标签下的li标签)。<br>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var $spans = $(&apos;span&apos;);</span><br><span class="line">$(&quot;p&quot;).find($spans).css(&apos;color&apos;, &apos;red&apos;);</span><br></pre></td></tr></table></figure><p>祖先：<br>parent() 方法返回被选元素的直接父元素。该方法只会向上一级对 DOM 树进行遍历。</p><p>parents() 方法返回被选元素的所有祖先元素，它一路向上直到文档的根元素 (<html>)。可以使用可选参数来过滤对祖先元素的搜索。</html></p><p>parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。</p><p>closest()：从元素本身开始，在DOM树上逐级向上级元素匹配，并返回最先匹配的祖先元素树上逐级向上级元素匹配，并返回最先匹配的祖先元素。<br>$(“div”).closet(“li’) 在div元素中往上查找所有的li元素</p><p><strong>.parents()和.closest()的区别</strong>：<br>    1.起始位置不同：.closest开始于当前元素 .parents开始于父元素<br>    2.遍历的目标不同：.closest要找到指定的目标，.parents遍历到文档根元素，closest向上查找，直到找到一个匹配的就停止查找，parents一直查找到根元素，并将匹配的元素加入集合<br>    3.结果不同：.closest返回的是包含零个或一个元素的jquery对象，parents返回的是包含零个或一个或多个元素的jquery对象</p><p>同胞：<br>next() 方法返回被选元素的下一个同胞元素。该方法只返回一个元素。选择性地接受同一类型选择器表达式<br>prev() 查找指定元素集合中每一个元素紧邻的前面同辈元素的元素集合.选择性地接受同一类型选择器表达式<br>nextAll() 返回被选元素的所有跟随的同胞元素。<br>nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。<br>siblings() 方法返回被选元素的所有同胞元素。选择性地接受同一类型选择器表达式</p><p>add():将元素添加到匹配的元素集合中，.add()的参数可以几乎接受任何的$()，包括一个jQuery选择器表达式，DOM元素，或HTML片段引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">each()：</span><br><span class="line">    $(&quot;li&quot;).each(function(index, element) &#123;</span><br><span class="line">         index 索引 0,1</span><br><span class="line">         element是对应的li节点 li,li</span><br><span class="line">         this 指向的是li</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>   each是一个for循环的包装迭代器<br>    each通过回调的方式处理，并且会有2个固定的实参，索引与元素<br>    each回调方法中的this指向当前迭代的dom元素<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,ele</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="keyword">this</span>).css(<span class="string">'color'</span>,<span class="string">'red'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,ele</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(index %<span class="number">2</span>)&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="keyword">this</span>).css(<span class="string">'color'</span>,<span class="string">'blue'</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dom小知识点很多，总是过段时间又忘了，这次做个总结吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Dom节点的创建&quot;&gt;&lt;a href=&quot;#Dom节点的创建&quot; class=&quot;headerlink&quot; title=&quot;Dom节点的创建&quot;&gt;&lt;/a&gt;Dom节点的创建&lt;/h2&gt;&lt;p&gt;jQuer
      
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Dom" scheme="http://yoursite.com/tags/Dom/"/>
    
  </entry>
  
  <entry>
    <title>什么是SDK什么是CDN</title>
    <link href="http://yoursite.com/2019/01/07/CDN/"/>
    <id>http://yoursite.com/2019/01/07/CDN/</id>
    <published>2019-01-07T14:28:38.108Z</published>
    <updated>2019-01-07T14:33:02.354Z</updated>
    
    <content type="html"><![CDATA[<p>今天的学习过程中碰到了Sdk，cdn，关于它们一直没有清楚的概念。<br>好吧对于我来说要了解好CDN得花点功夫了- -！不懂不要紧，加油学吧！</p><hr><h3 id="什么是SDK"><a href="#什么是SDK" class="headerlink" title="什么是SDK"></a>什么是SDK</h3><p>软件开发工具包（Software Development Kit，即SDK）一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。</p><p> 软件开发工具包，只是简单的为某个程序设计语言提供应用程序接口的一些文件，但也可能包括能与某种嵌入式系统通讯的复杂的硬件。</p><p> SDK通常包含许可证，这些许可证使它们不适合构建旨在根据不兼容许可证开发的软件。例如，专有SDK通常与自由软件开发不兼容，而GPL许可的SDK可能与专有软件开发不兼容，所有这些都特别是出于法律原因。但是，根据GNU宽通用公共许可证（LGPL）构建的SDK通常对于专有开发是安全的。</p><p> SDK是一系列程序接口，文档，开发工具的集合。sdk即单单不是一个开发工具，也不是一个程序。一个完整的SDK应该包括以下内容：</p><ul><li>（1）接口文件和库文件<br>接口文件和库文件就是API，将底层的代码进行封装保护，提供给用户一个调用底层代码的接口；</li><li>（2）帮助文档<br>帮助文档解释接口文件和库文件功能，以及介绍相关的开发工具，操作示例等等；</li><li>（3）开发示例<br>开发示例就是做出来的一个DEMO展示，也要包括源代码；</li><li>（4）实用工具。<br>   实用工具是用来协助用户进行二次开发的工具，比如二次开发向导、API 搜索工具、软件打包工具等。</li></ul><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><h4 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h4><p>CDN的全称是Content Delivery Network，即内容分发网络。</p><p> CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><h4 id="使用CDN的好处"><a href="#使用CDN的好处" class="headerlink" title="使用CDN的好处"></a>使用CDN的好处</h4><p>CDN的基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。因此，有如下优点：</p><p>通过提高网站响应速度，改善用户体验，增强用户满意度和粘合度;</p><p>轻松应对突发流量，随时展开网络推广;</p><p>有效抵御洪水式网络攻击，使网站永不宕机;</p><p>减少源站点负载，节省网站分布式架构的支出成本和运维成本。</p><h4 id="基础架构："><a href="#基础架构：" class="headerlink" title="基础架构："></a>基础架构：</h4><p>最简单的CDN网络由一个DNS服务器和几台缓存服务器组成：</p><ul><li>当用户点击网站页面上的内容URL，经过本地DNS系统解析，DNS系统会最终将域名的解析权交给CNAME指向的CDN专用DNS服务器。</li><li>CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回用户。</li><li>用户向CDN的全局负载均衡设备发起内容URL访问请求。</li><li>CDN全局负载均衡设备根据用户IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。</li><li>区域负载均衡设备会为用户选择一台合适的缓存服务器提供服务，选择的依据包括：根据用户IP地址，判断哪一台服务器距用户最近；根据用户所请求的URL中携带的内容名称，判断哪一台服务器上有用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。基于以上这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址。</li><li>全局负载均衡设备把服务器的IP地址返回给用户。</li><li>用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。<img src="https://img-blog.csdnimg.cn/20190107222201922.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="哪些情况推荐使用CDN？"><a href="#哪些情况推荐使用CDN？" class="headerlink" title="哪些情况推荐使用CDN？"></a>哪些情况推荐使用CDN？</h4>一般来说以资讯、内容等为主的网站，具有一定访问体量的网站资讯网站、政府机构网站、行业平台网站、商城等以动态内容为主的网站论坛、博客、交友、SNS、网络游戏、搜索/查询、金融等。提供http下载的网站软件开发商、内容服务提供商、网络游戏运行商、源码下载等有大量流媒体点播应用的网站拥有视频点播平台的电信运营商、内容服务提供商、体育频道、宽频频道、在线教育、视频博客等<br>这个大神关于CDN的解释真的很通俗易懂！<br>侵权删！<br><img src="https://img-blog.csdnimg.cn/20190107222820240.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote><p><a href="https://www.zhihu.com/question/36514327" target="_blank" rel="noopener">https://www.zhihu.com/question/36514327</a></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天的学习过程中碰到了Sdk，cdn，关于它们一直没有清楚的概念。&lt;br&gt;好吧对于我来说要了解好CDN得花点功夫了- -！不懂不要紧，加油学吧！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;什么是SDK&quot;&gt;&lt;a href=&quot;#什么是SDK&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Computer Basics" scheme="http://yoursite.com/categories/Computer-Basics/"/>
    
    
      <category term="sdk" scheme="http://yoursite.com/tags/sdk/"/>
    
      <category term="cdn" scheme="http://yoursite.com/tags/cdn/"/>
    
  </entry>
  
  <entry>
    <title>js高级之运动系列（匀速运动/缓冲运动/弹性运动）</title>
    <link href="http://yoursite.com/2019/01/06/JS_moves/"/>
    <id>http://yoursite.com/2019/01/06/JS_moves/</id>
    <published>2019-01-06T11:40:03.094Z</published>
    <updated>2019-01-06T11:51:11.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="匀速运动"><a href="#匀速运动" class="headerlink" title="匀速运动"></a>匀速运动</h2><p>鼠标经过，匀速运动开始<br>css部分<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">right</span>:-<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">       <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">         <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>布局<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>匀速<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span><br><span class="line">    box.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        startMove(box,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    box.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        startMove(box,<span class="number">-150</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> timer=<span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj,target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> speed=<span class="number">0</span>;</span><br><span class="line">    clearInterval(timer);</span><br><span class="line">    timer=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj.offsetLeft&lt;target)&#123;</span><br><span class="line">            speed=<span class="number">10</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            speed=<span class="number">-10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj.offsetLeft==target)&#123;</span><br><span class="line">            clearInterval(timer);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            obj.style.left=obj.offsetLeft+speed+<span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="简单缓冲运动并回到原点"><a href="#简单缓冲运动并回到原点" class="headerlink" title="简单缓冲运动并回到原点"></a>简单缓冲运动并回到原点</h2><p>布局部分，嘿嘿以简单为主。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"开始"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"回到原点"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css部分<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> box=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> back=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> timer=<span class="literal">null</span>;</span><br><span class="line">        btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        startMove(box,<span class="number">700</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//缓冲运动部分</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">elem,target</span>)</span>&#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> speed=(target-elem.offsetLeft)/<span class="number">10</span>;</span><br><span class="line">                speed=speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil((target-elem.offsetLeft)/<span class="number">10</span>):<span class="built_in">Math</span>.floor((target-elem.offsetLeft)/<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">if</span>(target==elem.offsetLeft)&#123;</span><br><span class="line">                    clearTimeout(timer);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    elem.style.left=elem.offsetLeft+speed+<span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        back.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            startMove(box,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//回到原点部分</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">backMove</span>(<span class="params">elem,target</span>)</span>&#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">            timer=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> speed=<span class="built_in">Math</span>.floor((target-elem.offsetLeft)/<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">if</span>(target==elem.offsetLeft)&#123;</span><br><span class="line">                    clearTimeout(timer);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    elem.style.left=elem.offsetLeft+speed+<span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h2 id="弹性运动"><a href="#弹性运动" class="headerlink" title="弹性运动"></a>弹性运动</h2><p>一个运动的盒子，一个开始的按钮，一条终点线.，我设置这条线的原因是方便看出效果，也可以不设啦。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"开始"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>javaScript代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> box=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>];</span><br><span class="line">            btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                startMove(box,<span class="number">700</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> timer=<span class="literal">null</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">elem,target</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> speed=<span class="number">0</span>;</span><br><span class="line">                timer=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    speed+=(target-elem.offsetLeft)/<span class="number">8</span>;</span><br><span class="line">                    speed*=<span class="number">0.7</span>;</span><br><span class="line">                    <span class="comment">//我觉得0.7的效果好一点</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(speed)&lt;<span class="number">1</span>&amp;&amp;<span class="built_in">Math</span>.abs(elem.offsetLeft-target)&lt;<span class="number">1</span>)&#123;</span><br><span class="line">                        clearTimeout(timer);</span><br><span class="line">                        elem.style.left=target+<span class="string">"px"</span>;<span class="comment">//回到终点位置</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        elem.style.left=elem.offsetLeft+speed+<span class="string">"px"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,<span class="number">100</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>为了使刚好在终点线的位置做弹性运动，传入参数target就是终点线距离盒子的位置。<br>css部分<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">700px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;匀速运动&quot;&gt;&lt;a href=&quot;#匀速运动&quot; class=&quot;headerlink&quot; title=&quot;匀速运动&quot;&gt;&lt;/a&gt;匀速运动&lt;/h2&gt;&lt;p&gt;鼠标经过，匀速运动开始&lt;br&gt;css部分&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>学习镜像概念</title>
    <link href="http://yoursite.com/2019/01/06/Mirroring/"/>
    <id>http://yoursite.com/2019/01/06/Mirroring/</id>
    <published>2019-01-06T10:57:30.108Z</published>
    <updated>2019-01-06T11:31:05.449Z</updated>
    
    <content type="html"><![CDATA[<p>在自学Node.js过程中，看到有说国内直接使用 npm 的官方镜像是非常慢的，推荐使用淘宝 NPM 镜像。由于是半路出家没有很好的计算机基础知识，并不清楚镜像的概念。<br><em>镜像（Mirroring）是冗余的一种类型，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。</em><br><em>镜像是一种文件存储形式，可以把许多文件做成一个镜像文件。所谓镜像文件其实和ZIP压缩包类似，它将特定的一系列文件按照一定的格式制作成单一的文件，以方便用户下载和使用，例如一个测试版的操作系统、游戏等。</em><br>自己的理解就是：A的东西全部合成一个文件，B把它复制了过来，我们用软件打开B，B会从一个文件变成有许多文件的另一个A。<br>那npm官方镜像就是我们从npm服务器中把需要的包镜像储存到自己的电脑上。<br>即使小知识点也值得花心思去弄懂鸭，每天进步一点点。!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在自学Node.js过程中，看到有说国内直接使用 npm 的官方镜像是非常慢的，推荐使用淘宝 NPM 镜像。由于是半路出家没有很好的计算机基础知识，并不清楚镜像的概念。&lt;br&gt;&lt;em&gt;镜像（Mirroring）是冗余的一种类型，一个磁盘上的数据在另一个磁盘上存在一个完全相同
      
    
    </summary>
    
      <category term="Computer Basics" scheme="http://yoursite.com/categories/Computer-Basics/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="镜像" scheme="http://yoursite.com/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>Git新手使用总结</title>
    <link href="http://yoursite.com/2019/01/06/Git/"/>
    <id>http://yoursite.com/2019/01/06/Git/</id>
    <published>2019-01-06T10:54:37.397Z</published>
    <updated>2019-02-17T05:55:27.176Z</updated>
    
    <content type="html"><![CDATA[<hr><p>开始学习使用git bash惹，一边摸索一边记录下自己的学习过程。</p><h1 id="关于Git"><a href="#关于Git" class="headerlink" title="关于Git"></a>关于Git</h1><h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><h2 id="Git的主要功能：版本控制"><a href="#Git的主要功能：版本控制" class="headerlink" title="Git的主要功能：版本控制"></a>Git的主要功能：版本控制</h2><p>关于版本控制我是这样理解的：一个文件你做了修改，得到一个新的版本，可很多时候你无法使文件回到以前的样子。所以很多人会选择把修改过后的保存到一个新文件中。久而久之文件越来越多，你很难弄清楚哪个文件做了什么修改。这个时候就需要进行版本管理。<br>Git来对这些不同的版本进行控制。还可以很方便地查看两个不同版本之间的不同之处。</p><h2 id="Git的工作流程"><a href="#Git的工作流程" class="headerlink" title="Git的工作流程"></a>Git的工作流程</h2><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。<br><img src="https://img-blog.csdnimg.cn/20181229175500760.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="工作区、暂存区和版本库"><a href="#工作区、暂存区和版本库" class="headerlink" title="工作区、暂存区和版本库"></a>工作区、暂存区和版本库</h2></li><li>工作区：就是你在电脑里能看到的目录。</li><li>暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。<br><img src="https://img-blog.csdnimg.cn/2018122920345265.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我们把文件往Git版本库里添加的时候，是分两步执行的：</li></ul><p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；<br>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。<br>以下是菜鸟对这些知识的解释：</p><blockquote><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。<br>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。<br>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。<br>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。<br>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。<br>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。<br>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></file></file></p></blockquote><hr><h1 id="Git-bash使用"><a href="#Git-bash使用" class="headerlink" title="Git bash使用"></a>Git bash使用</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>申请了自己的github账号，下载git之后打开git bash。<br>配置本机的用户名和邮箱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><h2 id="本地使用"><a href="#本地使用" class="headerlink" title="本地使用"></a>本地使用</h2><h4 id="创建仓库并初始化"><a href="#创建仓库并初始化" class="headerlink" title="创建仓库并初始化"></a>创建仓库并初始化</h4><p>新建一个文件夹，在目录下建一个test文本，**创建test.txt的时候记得编码设置为UTF8，否则会出现乱码。右键点击git bash。<br><img src="https://img-blog.csdnimg.cn/20181230085923641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>test的内容随便写啦。。。。<br><img src="https://img-blog.csdnimg.cn/20181230085943295.PNG" alt="在这里插入图片描述"><br>输入git init初始化仓库<br><img src="https://img-blog.csdnimg.cn/2018123009003328.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>.git文件自动生成了，作用上文已经讲过啦，不能删噢。</p><h4 id="文件添加和提交"><a href="#文件添加和提交" class="headerlink" title="文件添加和提交"></a>文件添加和提交</h4><blockquote><p>$ git add 文件名.文件类型</p></blockquote><p>添加我们之前创建的test文件<br>如果一个个添加太麻烦惹，我们还有其他方法！</p><blockquote><p>git add -A 提交所有变化<br>git add -u 提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)<br>git add . 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</p></blockquote><p>by the way! <strong>我们可以使用git status来查看状态</strong><br><img src="https://img-blog.csdnimg.cn/20181230090058109.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>添加成功辣，我们先在可commit了</p><blockquote><p>$ git commit -m “修改注释”<br>提交后git log可以查看日志！</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181230090118731.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h4><p><img src="https://img-blog.csdnimg.cn/20181230090139532.PNG" alt="在这里插入图片描述"><br>我们添加文件后，文件开始被追踪了，这时我们可以git status看看两次的不同喔！<br><img src="https://img-blog.csdnimg.cn/2018123009023210.PNG" alt="在这里插入图片描述"><br>怎么看我们修改了什么呢？</p><blockquote><p>使用$ git diff 文件名+类型</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181230090327794.PNG" alt="在这里插入图片描述"></p><p>也可以查看文件的内容</p><blockquote><p>$ cat 文件名<br>这个要注意的是必须在文件夹里有那个文件你才可以查看。</p></blockquote><p>如果我现在想撤销更改，执行git checkout – .<br><img src="https://img-blog.csdnimg.cn/20181230091729615.PNG" alt="在这里插入图片描述"><br>然后打开文件看看，它果然复原辣！<br><img src="https://img-blog.csdnimg.cn/20181230092051271.PNG" alt="在这里插入图片描述"><br>然后我们再次修改文件内容。<br><img src="https://img-blog.csdnimg.cn/20181230092437888.PNG" alt="在这里插入图片描述"><br>执行添加，提交步骤。查看日志可以看到两个版本辣。<br><img src="https://img-blog.csdnimg.cn/2018123009283117.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>从上面的提交日志，黄色commit后面的一串数字，我们把它称为版本号吧！版本回退命令 :</p><blockquote><p>$ git reset –hard 版本号前7位</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181230094604557.PNG" alt="在这里插入图片描述"><br>查看文件，已经回到第一个状态了！<br><img src="https://img-blog.csdnimg.cn/20181230094713705.PNG" alt="在这里插入图片描述"><br>这是再git log查看日志，commit记录只有一个了，<br><img src="https://img-blog.csdnimg.cn/2018123009492253.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>想了解版本回退的原理看廖雪峰老师这个解释！很清楚鸭！</p><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000/" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000/</a></p></blockquote><h4 id="版本恢复"><a href="#版本恢复" class="headerlink" title="版本恢复"></a>版本恢复</h4><p>输入git reflog查看之前的版本，然后再次git reset –hard到需要的版本即可。<br><img src="https://img-blog.csdnimg.cn/20181230095349383.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="本地仓库关联远程仓库"><a href="#本地仓库关联远程仓库" class="headerlink" title="本地仓库关联远程仓库"></a>本地仓库关联远程仓库</h2><h4 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h4><p>首先生成ssh</p><blockquote><p>$ssh-keygen -t rsa -C “你的邮箱”</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181230214924368.PNG" alt="在这里插入图片描述"><br>出现了这两行。这是让你输入保存这个秘钥的文件，不输入直接回车它会自动生成。<br>回车以后让你输入push的时候需要的密码，也可以不输入直接回车，这样push的时候就没有密码。<br>再回车。<br><img src="https://img-blog.csdnimg.cn/20181230220029756.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这样ssh key已经创建成功辣<br>然后我们输入以下命令复制ssh key</p><blockquote><p>clip &lt; ~/.ssh/id_rsa.pub</p></blockquote><p>进入github，进入Settings<br><img src="https://img-blog.csdnimg.cn/20181230220614729.png" alt="在这里插入图片描述"><br>点击左边的ssh and GPG keys<br><img src="https://img-blog.csdnimg.cn/20181230220643495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击New SSH key，title随便起就好辣，然后把之前复制的ssh key粘贴，然后点击下面的Add SSH key。<br><img src="https://img-blog.csdnimg.cn/20181230221256777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 添加成功后你的邮箱会受到信息！执行以下命令测试连接是否成功。</p><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>连接成功<br><img src="https://img-blog.csdnimg.cn/20181230221839812.PNG" alt="在这里插入图片描述"><br>这里出现了SSH警告 Are you sure you want to continue connecting (yes/no)?</p><blockquote><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。<br>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：Warning: Permanently added ‘github.com’ (RSA) to the list of known hosts.<br>这个警告只会出现一次，后面的操作就不会有任何警告了。</p></blockquote><h4 id="本地连接github仓库"><a href="#本地连接github仓库" class="headerlink" title="本地连接github仓库"></a>本地连接github仓库</h4><p>创建一个新仓库<br><img src="https://img-blog.csdnimg.cn/20181230222655635.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181230223318518.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制SSH地址，然后执行以下命令</p><blockquote><p>$git remote add origin 你复制的地址</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181230225904518.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我的出现了fatal: remote origin already exists.错误，解决方案如图所示。<br><em>输入git remote -v验证一下会出现你添加成功的远程仓库。</em><br><em>如果你以后不想连接这个远程仓库了，只需要输入git remote remove +代称即可</em></p><blockquote><p>by the way!如果你在创建 repository 的时候，加入了 README.md 或者 LICENSE ，那么 github 会拒绝你的 push 。你需要先执行 git pull origin master。</p></blockquote><p>然后执行如下命令：把本地仓库上传至Github的仓库并进行关联</p><blockquote><p>$ git push -u origin master</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181230230206553.PNG" alt="在这里插入图片描述"><br>刷新github，关联成功了。<br><img src="https://img-blog.csdnimg.cn/20181230230501475.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="克隆远程库"><a href="#克隆远程库" class="headerlink" title="克隆远程库"></a>克隆远程库</h4><p>执行 git clone 复制的SSH地址</p><p>如果是直接clone了别人的仓库是没法push自己的修改的。你需要先fork到自己的远程仓库，然后再从自己那里clone。<br>如果clone了一个项目，并想为这个项目贡献自己的力量，你就可以往自己的仓库推送！然后在GitHub上发起一个pull request。</p><h4 id="本地更新远程仓库的修改"><a href="#本地更新远程仓库的修改" class="headerlink" title="本地更新远程仓库的修改"></a>本地更新远程仓库的修改</h4><p>因为一个项目有很多人参与，如果远程仓库改变了，你想确保自己的文件和远程的一样。执行以下代码</p><blockquote><p>$ git pull origin</p></blockquote><p>或者</p><blockquote><p>可以输入两句“git fetch”和“git merge”<br>$ git fetch<br>$ git merge</p></blockquote><p>以下是我学习的一些博客，感谢这些大神们无私的分享！</p><blockquote><p><a href="https://blog.csdn.net/qazwsxpcm/article/details/68946736?utm_source=blogxgwz0#t1" target="_blank" rel="noopener">https://blog.csdn.net/qazwsxpcm/article/details/68946736?utm_source=blogxgwz0#t1</a></p><p><a href="http://www.cnblogs.com/schaepher/p/5561193.html#function" target="_blank" rel="noopener">http://www.cnblogs.com/schaepher/p/5561193.html#function</a></p><p><a href="https://blog.csdn.net/qq_36667170/article/details/79085301#t0" target="_blank" rel="noopener">https://blog.csdn.net/qq_36667170/article/details/79085301#t0</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;开始学习使用git bash惹，一边摸索一边记录下自己的学习过程。&lt;/p&gt;
&lt;h1 id=&quot;关于Git&quot;&gt;&lt;a href=&quot;#关于Git&quot; class=&quot;headerlink&quot; title=&quot;关于Git&quot;&gt;&lt;/a&gt;关于Git&lt;/h1&gt;&lt;h2 id=&quot;Git是什么&quot;
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>javaScript编程题之检测字符串中出现次数最多的字符</title>
    <link href="http://yoursite.com/2019/01/06/most/"/>
    <id>http://yoursite.com/2019/01/06/most/</id>
    <published>2019-01-06T10:53:10.737Z</published>
    <updated>2019-01-06T11:32:05.076Z</updated>
    
    <content type="html"><![CDATA[<p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aaaaakkkkkkssssaaggggssjjjjjsssaa"</span>;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> max,maxNum;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj[str[i]])&#123;</span><br><span class="line">        obj[str[i]]=<span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        obj[str[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">max=<span class="number">0</span>,maxNum=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[i]&gt;max)&#123;</span><br><span class="line">        max=obj[i];</span><br><span class="line">        maxNum=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(maxNum,max);</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"aaaaakkkkkkssssssjjjjjsssaa"</span>;</span><br><span class="line"><span class="keyword">var</span> arr=str.split(<span class="string">""</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMost</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,next</span>)</span>&#123;</span><br><span class="line">        prev[next]=prev[next]+<span class="number">1</span>||<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;,&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(getMost(arr));</span><br></pre></td></tr></table></figure><p>如果刚看这个方法不理解，可以先熟悉一下reduce方法回掉函数各个参数的意义。<br>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br><strong>语法：</strong> array.reduce(function(total, currentValue, currentIndex, arr), initialValue)</p><p>total    必需。初始值, 或者计算结束后的返回值。<br>currentValue    必需。当前元素<br>currentIndex    可选。当前元素的索引<br>arr    可选。当前元素所属的数组对象。<br>initialValue：可选项，其值用于第一次调用 callback 的第一个参数。如果没有设置初始值，则将数组中的第一个元素作为初始值。==空数组调用reduce时没有设置初始值将会报错。==</p><p>看一下以下这编程题可以帮助理解reduce方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">查找数组对象中 age 大于 18 对象</span><br><span class="line">&#123;age: 19, name:'Jack'&#125;,</span><br><span class="line">&#123;age: 5, name:'Apple'&#125;,</span><br><span class="line">&#123;age: 12, name:'Lynn'&#125;,</span><br><span class="line">&#123;age: 25, name:'David'&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr=[&#123;<span class="attr">age</span>: <span class="number">19</span>, <span class="attr">name</span>:<span class="string">'Jack'</span>&#125;,&#123;<span class="attr">age</span>: <span class="number">5</span>, <span class="attr">name</span>:<span class="string">'Apple'</span>&#125;,&#123;<span class="attr">age</span>: <span class="number">12</span>, <span class="attr">name</span>:<span class="string">'Lynn'</span>&#125;,&#123;<span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>:<span class="string">'David'</span>&#125;];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">adult</span>(<span class="params">array</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> target=array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (item.age&gt;<span class="number">18</span>);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> target;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(adult(arr));</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;方法一：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS实现抽奖大转盘</title>
    <link href="http://yoursite.com/2019/01/06/turningTable/"/>
    <id>http://yoursite.com/2019/01/06/turningTable/</id>
    <published>2019-01-06T10:49:53.561Z</published>
    <updated>2019-01-06T11:30:24.460Z</updated>
    
    <content type="html"><![CDATA[<p>今天试了试自己写个抽奖大转盘。<br>先是借了两张别人的图片：<br><img src="https://img-blog.csdnimg.cn/20181126103321475.png" alt="指针"><br><img src="https://img-blog.csdnimg.cn/20181126103352754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzczODczMQ==,size_16,color_FFFFFF,t_70" alt="转盘"><br>下面是布局部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"round"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"turntable.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"pointer.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css部分:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.round</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">450px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">450px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">138px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">94px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是JavaScript部分,并使用了css3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> round=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"round"</span>)[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">var</span> box=round.getElementsByClassName(<span class="string">"box"</span>)[<span class="number">0</span>].children[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">var</span> btn=round.getElementsByClassName(<span class="string">"btn"</span>)[<span class="number">0</span>];</span><br><span class="line">   btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">var</span> deg=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">360</span>);</span><br><span class="line">       <span class="keyword">var</span> num=<span class="number">8</span>;</span><br><span class="line">       <span class="keyword">var</span> rotateDeg=num*<span class="number">360</span>+deg;</span><br><span class="line">       box.style.transform=<span class="string">"rotate("</span>+rotateDeg+<span class="string">"deg)"</span>;</span><br><span class="line">       box.style.transition=<span class="string">"5s"</span>;</span><br><span class="line">       setTimeout(<span class="string">"res("</span>+deg+<span class="string">")"</span>,<span class="number">5000</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">res</span>(<span class="params">deg</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(deg&gt;=<span class="number">0</span>&amp;&amp;deg&lt;=<span class="number">51</span>)&#123;</span><br><span class="line">           alert(<span class="string">"免单4999"</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(deg&gt;<span class="number">51</span>&amp;&amp;deg&lt;=<span class="number">102</span>)&#123;</span><br><span class="line">           alert(<span class="string">"免单50"</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(deg&gt;<span class="number">102</span>&amp;&amp;deg&lt;=<span class="number">153</span>)&#123;</span><br><span class="line">           alert(<span class="string">"免单10"</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(deg&gt;<span class="number">153</span>&amp;&amp;deg&lt;=<span class="number">204</span>)&#123;</span><br><span class="line">           alert(<span class="string">"免单5"</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(deg&gt;<span class="number">204</span>&amp;&amp;deg&lt;=<span class="number">255</span>)&#123;</span><br><span class="line">           alert(<span class="string">"免分期"</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(deg&gt;<span class="number">255</span>&amp;&amp;deg&lt;=<span class="number">306</span>)&#123;</span><br><span class="line">           alert(<span class="string">"提额度"</span>)</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           alert(<span class="string">"未中奖"</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       box.dataset.rotate=deg;</span><br><span class="line">       box.style.transform=<span class="string">"rotate("</span>+deg+<span class="string">"deg)"</span>;</span><br><span class="line">       box.style.transition=<span class="string">""</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天试了试自己写个抽奖大转盘。&lt;br&gt;先是借了两张别人的图片：&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20181126103321475.png&quot; alt=&quot;指针&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://img-blog.c
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS写斐波那契数列的几种方法</title>
    <link href="http://yoursite.com/2019/01/06/fibonacci/"/>
    <id>http://yoursite.com/2019/01/06/fibonacci/</id>
    <published>2019-01-06T10:42:17.722Z</published>
    <updated>2019-02-17T05:53:30.264Z</updated>
    
    <content type="html"><![CDATA[<p><strong>方法1</strong> 最直观的解题思路.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1= <span class="number">1</span>,num2= <span class="number">1</span>,sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= n; i += <span class="number">1</span>) &#123;</span><br><span class="line">        sum = num1 + num2</span><br><span class="line">        num1 = num2</span><br><span class="line">        num2 = sum</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//稍微改进一下以上的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonaccii</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1=<span class="number">1</span>,num2=<span class="number">1</span>,num3;</span><br><span class="line">    <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        num3=num1+num2;</span><br><span class="line">        num1=num2;</span><br><span class="line">        num2=num3;</span><br><span class="line">        arr.push(num3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法2</strong> 使用递归的方法, 但是当数字过大时浏览器会出现假死现象。毕竟递归需要堆栈，数字过大内存不够。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> result(n<span class="number">-2</span>)+result(n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//同样使用递归，只不过使用了三元表达式。</span></span><br><span class="line">    <span class="keyword">var</span> fib=<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n&lt;<span class="number">2</span>?n:fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i+=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(fib(i));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>方法3</strong> 使用“记忆”方法减少运算量。在一个数组里保存我们的储存结果，储存结果隐藏在闭包中.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> fibonaci=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> memo=[<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> fib=<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result=memo[n];</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> result!==<span class="string">'number'</span>)&#123;</span><br><span class="line">                result=fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> fib;</span><br><span class="line">    &#125;();</span><br><span class="line"><span class="comment">// 我们可以把这种技术推而广之</span></span><br><span class="line"><span class="comment">//编写一个函数来帮助我们构造带记忆功能的函数.</span></span><br><span class="line">    <span class="keyword">var</span> memoizer=<span class="function"><span class="keyword">function</span>(<span class="params">memo,formula</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> recur=<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result=memo[n];</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> result!==<span class="string">'number'</span>)&#123;</span><br><span class="line">                result=formula(recur,n);</span><br><span class="line">                memo[n]=result;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> recur;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> fib=memoizer([<span class="number">0</span>,<span class="number">1</span>],<span class="function"><span class="keyword">function</span>(<span class="params">recur,n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recur(n<span class="number">-1</span>)+recur(n<span class="number">-2</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p><strong>方法4</strong> 使用ES6中的generator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fib</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> b=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&lt;=x)&#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        [a,b]=[b,a+b];</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fib(<span class="number">5</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;方法1&lt;/strong&gt; 最直观的解题思路.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="javaScript" scheme="http://yoursite.com/categories/javaScript/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
</feed>
